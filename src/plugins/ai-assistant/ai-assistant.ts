/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2024 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

/**
 * [[include:plugins/jodit-ai/README.md]]
 * @packageDocumentation
 * @module plugins/joditai
 */

import './ai-assistant.less';

import { Button } from 'jodit/core/ui/button';
import { UIBlock, UIForm, UITextArea } from 'jodit/modules';
import type { IJodit, IUIButton, IUIForm } from 'jodit/types';
import { Plugin } from 'jodit/core/plugin/plugin';
import { extendLang, pluginSystem } from 'jodit/core/global';
import * as langs from './langs';
import './config';

/**
 * The plugin inserts content generated by AI into the editor.
 */
export class aiAssistant extends Plugin {
	/** @override */
	override buttons: Plugin['buttons'] = [
		{
			name: 'ai-commands',
			group: 'insert'
		},
		{
			name: 'ai-assistant',
			group: 'insert'
		}
	];

	constructor(jodit: IJodit) {
		super(jodit);
		extendLang(langs);
	}

	/** @override */
	override afterInit(jodit: IJodit): void {
		jodit.e.on(
			'invokeAiAssistant.ai-assistant',
			(
				prompt: string,
				aiAssistantCallback: (
					prompt: string,
					htmlFragment: string
				) => Promise<string>
			) => {
				jodit.s.focus();
				const selectedText = jodit.s.html;
				aiAssistantCallback(prompt, selectedText).then(
					(htmlFragment: string) => {
						if (
							htmlFragment != null &&
							htmlFragment !== undefined
						) {
							const htmlResponse = jodit.c.fromHTML(htmlFragment);
							jodit.e.fire('ai-assistant-response', htmlResponse);
						} else {
							jodit.e.fire('ai-assistant-response', '');
						}
					}
				);
			}
		);

		jodit.e.on('generateAiAssistantForm.ai-assistant', (prompt: string) => {
			const container = jodit.c.fromHTML(`
            <div class="jodit-ai-assistant">
                <div class="jodit-ai-assistant__container">
                    <div class="jodit-ai-assistant__container__body"> 
                    </div>
                    <div class="jodit-ai-assistant__container__buttons"> 
                    </div>
                    <div class="jodit-ai-assistant__container__results">
                        <div class="spinner"></div>
                    </div>
                </div>
            </div>`);

			const dialog = jodit.dlg({
				buttons: ['fullsize', 'dialog.close'],
				closeOnClickOverlay: true,
				closeOnEsc: true,
				resizable: false,
				draggable: true,
				minWidth: 460,
				maxWidth: 460
			});
			dialog.bindDestruct(jodit);

			const body = container.querySelector(
				'.jodit-ai-assistant__container__body'
			);
			const results = container.querySelector(
				'.jodit-ai-assistant__container__results'
			);
			const containerButtons = container.querySelector(
				'.jodit-ai-assistant__container__buttons'
			);

			const insertAfterButton = Button(
				jodit,
				'',
				'Insert After',
				'initial'
			).onAction(() => {
				if (results!.firstChild != null) {
					const currentSelection = jodit.s.current();
					if (
						currentSelection != null &&
						currentSelection.parentElement != null
					) {
						jodit.s.setCursorIn(
							currentSelection.parentElement,
							false
						);
						jodit.s.insertHTML(results!.innerHTML);
					}
				}
				dialog.close();
			});
			let tryAgainButton: IUIButton = {} as IUIButton;
			const submitButton = Button(jodit, 'ai-assistant', '').onAction(
				() => {
					if (formAiAssistant.validate()) {
						formAiAssistant.submit();
						submitButton.setState({ disabled: true });
						tryAgainButton.setState({ disabled: true });
					}
				}
			);
			tryAgainButton = Button(jodit, '', 'Try Again', 'initial').onAction(
				() => {
					if (formAiAssistant.validate()) {
						formAiAssistant.submit();
						submitButton.setState({ disabled: true });
						tryAgainButton.setState({ disabled: true });
					}
				}
			);
			const promptInput = new UITextArea(jodit, {
				name: 'prompt',
				required: true,

				label: 'Prompt',
				placeholder: 'Ask AI to improve generated text',
				className:
					'jodit-ai-assistant__container__body__prompt-row__input'
			});
			const insertButton = Button(
				jodit,
				'',
				'Insert',
				'primary'
			).onAction(() => {
				if (results!.firstChild != null) {
					jodit.s.focus();
					jodit.s.insertHTML(results!.innerHTML);
				}
				dialog.close();
			});
			const buttonsBLock = new UIBlock(
				jodit,
				[insertButton, insertAfterButton, tryAgainButton],
				{
					className: 'jodit-ai-assistant__container__body__prompt-row'
				}
			);
			const formAiAssistant: IUIForm = new UIForm(jodit, [
				new UIBlock(jodit, [promptInput, submitButton], {
					className: 'jodit-ai-assistant__container__body__prompt-row'
				})
			]);

			results!.classList.add('ai-assistant-hide');
			containerButtons!.classList.add('ai-assistant-hide');
			containerButtons!.appendChild(buttonsBLock.container);
			body!.appendChild(formAiAssistant.container);

			formAiAssistant.onSubmit((data: Record<string, string>) => {
				jodit.e.fire(
					'invokeAiAssistant',
					data.prompt,
					jodit.o.aiAssistantCallback
				);
				results!.classList.remove('ai-assistant-hide');
				containerButtons!.classList.remove('ai-assistant-hide');
				results!.innerHTML = '<div class="spinner"></div>';
				insertButton.focus();
			});

			jodit.e.on('ai-assistant-response', (htmlFragment: HTMLElement) => {
				if (htmlFragment != null && htmlFragment !== undefined) {
					results!.innerHTML = '';
					results!.appendChild(htmlFragment);
				}
				submitButton.setState({ disabled: false });
				tryAgainButton.setState({ disabled: false });
			});

			if (prompt != null && prompt !== undefined && prompt !== '') {
				let promptToUse: string = '';
				switch (prompt) {
					case 'aiImproveWritingPrompt':
						promptToUse = jodit.o.aiImproveWritingPrompt;
						break;
					case 'aiMakeShorterPrompt':
						promptToUse = jodit.o.aiMakeShorterPrompt;
						break;
					case 'aiMakeLongerPrompt':
						promptToUse = jodit.o.aiMakeLongerPrompt;
						break;
					case 'aiSimplifyLanguagePrompt':
						promptToUse = jodit.o.aiSimplifyLanguagePrompt;
						break;
					case 'aiSummarizePrompt':
						promptToUse = jodit.o.aiSummarizePrompt;
						break;
					case 'aiContinuePrompt':
						promptToUse = jodit.o.aiContinuePrompt;
						break;
					case 'aiChangeToneProfessionalPrompt':
						promptToUse = jodit.o.aiChangeToneProfessionalPrompt;
						break;
					case 'aiChangeToneFriendlyPrompt':
						promptToUse = jodit.o.aiChangeToneFriendlyPrompt;
						break;
					case 'aiChangeToneFormalPrompt':
						promptToUse = jodit.o.aiChangeToneFormalPrompt;
						break;
					case 'aiChangeToneCasualPrompt':
						promptToUse = jodit.o.aiChangeToneCasualPrompt;
						break;
					case 'aiChangeToneDirectPrompt':
						promptToUse = jodit.o.aiChangeToneDirectPrompt;
						break;
					case 'aiChangeToneConfidentPrompt':
						promptToUse = jodit.o.aiChangeToneConfidentPrompt;
						break;
					case 'aiChangeStyleBusinessPrompt':
						promptToUse = jodit.o.aiChangeStyleBusinessPrompt;
						break;
					case 'aiChangeStyleLegalPrompt':
						promptToUse = jodit.o.aiChangeStyleLegalPrompt;
						break;
					case 'aiChangeStyleJournalismPrompt':
						promptToUse = jodit.o.aiChangeStyleJournalismPrompt;
						break;
					case 'aiChangeStylePoeticPrompt':
						promptToUse = jodit.o.aiChangeStylePoeticPrompt;
						break;
					case 'aiTranslateToSpanishPrompt':
						promptToUse = jodit.o.aiTranslateToSpanishPrompt;
						break;
					case 'aiTranslateToFrenchPrompt':
						promptToUse = jodit.o.aiTranslateToFrenchPrompt;
						break;
					case 'aiTranslateToGermanPrompt':
						promptToUse = jodit.o.aiTranslateToGermanPrompt;
						break;
					case 'aiTranslateToItalianPrompt':
						promptToUse = jodit.o.aiTranslateToItalianPrompt;
						break;
					case 'aiTranslateToPortuguesePrompt':
						promptToUse = jodit.o.aiTranslateToPortuguesePrompt;
						break;
					case 'aiTranslateToEnglishPrompt':
						promptToUse = jodit.o.aiTranslateToEnglishPrompt;
						break;
					case 'aiTranslateToChinesePrompt':
						promptToUse = jodit.o.aiTranslateToChinesePrompt;
						break;
					case 'aiTranslateToJapanesePrompt':
						promptToUse = jodit.o.aiTranslateToJapanesePrompt;
						break;
					case 'aiTranslateToKoreanPrompt':
						promptToUse = jodit.o.aiTranslateToKoreanPrompt;
						break;
					case 'aiTranslateToRussianPrompt':
						promptToUse = jodit.o.aiTranslateToRussianPrompt;
						break;
					case 'aiTranslateToArabicPrompt':
						promptToUse = jodit.o.aiTranslateToArabicPrompt;
						break;
				}
				if (
					promptToUse != null &&
					promptToUse !== undefined &&
					promptToUse !== ''
				) {
					promptInput.value = promptToUse;
					formAiAssistant.submit();
					submitButton.setState({ disabled: true });
					tryAgainButton.setState({ disabled: true });
				}
			}

			dialog.open(container, 'AI Assistant', true, false);
			promptInput.focus();
			return dialog;
		});
	}

	/** @override */
	protected beforeDestruct(jodit: IJodit): void {}
}

pluginSystem.add('ai-assistant', aiAssistant);
